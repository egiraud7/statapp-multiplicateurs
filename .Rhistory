## Projet stat'app - Analyse des multiplicateurs budgétaires
#Librairies
if (!require("stats")) {install.packages("stats"); library("stats")} # Time series package
if (!require("openxlsx")) {install.packages("openxlsx"); library("openxlsx")} # Input from and write to Excel
if (!require("bibtex")) {install.packages("bibtex"); library("bibtex")} # Input from and write to Excel
if (!require("vars")) {install.packages("vars"); library("vars")} # Input from and write to Excel
if (!require("urca")) {install.packages("urca"); library("urca")} # Stationarity tests
## Directory
#setwd("/Users/eleagiraud/Documents/ENSAE/Statapp")
#working.dir = '/Users/eleagiraud/Documents/ENSAE/Statapp'
#if ((working.dir=='')) {
#  stop("Must specify working.dir locations")
#}
## Importation des données
d_US <- read.xlsx("2023-12-09_Base de données_clean.xslx", sheet="US_quarter", na.strings = ".", colNames=TRUE, rowNames=FALSE, detectDates = TRUE)
d_US <- read.xlsx("statapp_multiplicateurs//2023-12-09_Base de données_clean.xslx", sheet="US_quarter", na.strings = ".", colNames=TRUE, rowNames=FALSE, detectDates = TRUE
d_US <- read.xlsx("statapp_multiplicateurs//2023-12-09_Base de données_clean.xslx", sheet="US_quarter", na.strings = ".", colNames=TRUE, rowNames=FALSE, detectDates = TRUE)
d_US <- read.xlsx("C:\Users\Utilisateur\Documents\GitHub\statapp-multiplicateurs\statapp_multiplicateurs\2023-12-09_Base de données_clean.xslx", sheet="US_quarter", na.strings = ".", colNames=TRUE, rowNames=FALSE, detectDates = TRUE
d_US <- read.xlsx("2023-12-09_Base de données_clean.xslx", sheet="US_quarter", na.strings = ".", colNames=TRUE, rowNames=FALSE, detectDates = TRUE)
d_US <- read.xlsx("2023-12-09_Base de données_clean.xslx", sheet="US_quarter", colNames=TRUE, rowNames=FALSE, detectDates = TRUE)
d_US <- read.xlsx("2023-12-09_Base de donneees_clean.xslx", sheet="US_quarter", colNames=TRUE, rowNames=FALSE, detectDates = TRUE)
d_US <- read.excel("2023-12-09_Base de donneees_clean.xslx", sheet="US_quarter", colNames=TRUE, rowNames=FALSE, detectDates = TRUE)
d_US <- read.xlsx("2023-12-09_Base de donneees_clean.xslx", sheet="US_quarter", colNames=TRUE, rowNames=FALSE, detectDates = TRUE)
## Projet stat'app - Analyse des multiplicateurs budgétaires
#Librairies
if (!require("stats")) {install.packages("stats"); library("stats")} # Time series package
if (!require("openxlsx")) {install.packages("openxlsx"); library("openxlsx")} # Input from and write to Excel
if (!require("bibtex")) {install.packages("bibtex"); library("bibtex")} # Input from and write to Excel
if (!require("vars")) {install.packages("vars"); library("vars")} # Input from and write to Excel
if (!require("urca")) {install.packages("urca"); library("urca")} # Stationarity tests
library(dplyr)
library(readxl)
library(magrittr)
library(tidyr)
library(zoo)
library(readxl)
d_US <- read.xlsx("2023-12-09_Base de donneees_clean.xslx", sheet="US_quarter", colNames=TRUE, rowNames=FALSE, detectDates = TRUE)
library(readxl)
d_US <- read.xlsx("2023-12-09_Base de donneees_clean.xslx", sheet="US_quarter", colNames=TRUE, rowNames=FALSE, detectDates = TRUE)
d_US <- read.xlsx("2023-12-09_Base de donneees_clean", sheet="US_quarter", colNames=TRUE, rowNames=FALSE, detectDates = TRUE)
d_US <- read_excel("2023-12-09_Base de donneees_clean", sheet="US_quarter", colNames=TRUE, rowNames=FALSE, detectDates = TRUE)
d_US <- read_excel("2023-12-09_Base de donneees_clean", sheet="US_quarter", colNames=TRUE, rowNames=FALSE, detectDates = TRUE)
d_US <- read_excel("2023-12-09_Base de donneees_clean", sheet="US_quarter")
d_US <- read_excel("2023-12-09_Base de donneees_clean.xslx", sheet="US_quarter")
## Projet stat'app - Analyse des multiplicateurs budgétaires
#Librairies
if (!require("stats")) {install.packages("stats"); library("stats")} # Time series package
if (!require("openxlsx")) {install.packages("openxlsx"); library("openxlsx")} # Input from and write to Excel
if (!require("bibtex")) {install.packages("bibtex"); library("bibtex")} # Input from and write to Excel
if (!require("vars")) {install.packages("vars"); library("vars")} # Input from and write to Excel
if (!require("urca")) {install.packages("urca"); library("urca")} # Stationarity tests
library(dplyr)
library(readxl)
library(magrittr)
library(tidyr)
library(zoo)
library(readxl)
d_US <- read_excel("2023-12-09_Base de donneees_clean.xslx", sheet="US_quarter")
d_US <- read_excel("2023-12-09_Base de donneees_clean", sheet="US_quarter")
d_US <- read_excel("2023-12-09_Base de données_clean", sheet="US_quarter")
d_US <- read_excel("C:\Users\Utilisateur\Documents\GitHub\statapp-multiplicateurs\2023-12-09_Base de données_clean.xslx", sheet="US_quarter")
d_US <- read_excel("~GitHub\statapp-multiplicateurs\2023-12-09_Base de données_clean.xslx", sheet="US_quarter")
d_US <- read_excel("~GitHub\\statapp-multiplicateurs\\2023-12-09_Base de données_clean.xslx", sheet="US_quarter")
d_US <- read_excel("C:\\Users\\Utilisateur\\Documents\\GitHub\\statapp-multiplicateurs\\2023-12-09_Base de données_clean.xslx", sheet="US_quarter")
d1 <- read_excel("2023-11-07 - OECD short term indicators.xlsx")
d1 <- read_excel("2023-11-07 - OECD short term indicators.xlsx")
d_germany_short <- d1
d1 <- read_excel("2023-11-07 - OECD short term indicators.xlsx")
d_germany_short <- d1
# Germany
#keep German data
d_germany_short <- d_germany_short %>%
filter(d_germany_short$Country=="Germany")
d_France <- read_excel("2023-12-09_Base de données_clean.xslx", sheet="FR_quarter"
d_Germany <- read_excel("2023-12-09_Base de données_clean.xslx", sheet="GER_quarter"
ts_d_France <- ts(d_France)
library(dplyr)
library(readxl)
library(magrittr)
library(tidyr)
library(zoo)
d_US <- read_excel("2023-12-07_BDD_clean.xlsx", sheet="US_quarter", skip=1)
d_France <- read_excel("2023-12-07_BDD_clean.xlsx", sheet="FR_quarter", skip=1)
d_Germany <- read_excel("2023-12-07_BDD_clean.xlsx", sheet="GER_quarter", skip=1)
d_US <- read_excel("2023-12-09_Base de données_clean.xlsx", sheet="US_quarter", skip=1)
d_France <- read_excel("2023-12-09_Base de données_clean.xlsx", sheet="FR_quarter", skip=1)
d_Germany <- read_excel("2023-12-09_Base de données_clean.xlsx", sheet="GER_quarter", skip=1)
ts_d_US <- ts(d_US)
ts_d_France <- ts(d_France)
ts_d_Germany <- ts(d_Germany)
ts.plot(ts_d_US$us.rgdp.dollar, type="l", main="US Real Gross Domestic Product",col="blue", ylab="RGDP (B$)")
ts.plot(ts_d_US, us.rgdp.dollar, type="l", main="US Real Gross Domestic Product",col="blue", ylab="RGDP (B$)")
View(ts_d_US)
ts.plot(ts_d_US[, us.rdgp.dollar], type="l", main="US Real Gross Domestic Product",col="blue", ylab="RGDP (B$)")
ts.plot(ts_d_US[, "us.rdgp.dollar"], type="l", main="US Real Gross Domestic Product",col="blue", ylab="RGDP (B$)")
ts.plot(ts_d_US$"us.rgdp.dollar", type="l", main="US Real Gross Domestic Product",col="blue", ylab="RGDP (B$)")
ts.plot(ts_d_US[, 7], type="l", main="US Real Gross Domestic Product",col="blue", ylab="RGDP (B$)")
View(d_US)
## Projet stat'app - Analyse des multiplicateurs budgétaires
#Librairies
if (!require("stats")) {install.packages("stats"); library("stats")} # Time series package
if (!require("openxlsx")) {install.packages("openxlsx"); library("openxlsx")} # Input from and write to Excel
if (!require("bibtex")) {install.packages("bibtex"); library("bibtex")} # Input from and write to Excel
if (!require("vars")) {install.packages("vars"); library("vars")} # Input from and write to Excel
if (!require("urca")) {install.packages("urca"); library("urca")} # Stationarity tests
library(dplyr)
library(readxl)
library(magrittr)
library(tidyr)
library(zoo)
library(readxl)
## Directory
#setwd("/Users/eleagiraud/Documents/ENSAE/Statapp")
#working.dir = '/Users/eleagiraud/Documents/ENSAE/Statapp'
#if ((working.dir=='')) {
#  stop("Must specify working.dir locations")
#}
## Importation des données
d_US <- read_excel("2023-12-09_Base de données_clean.xlsx", sheet="US_quarter", skip=1)
d_France <- read_excel("2023-12-09_Base de données_clean.xlsx", sheet="FR_quarter", skip=1)
d_Germany <- read_excel("2023-12-09_Base de données_clean.xlsx", sheet="GER_quarter", skip=1)
## Représentation graphique des PIB réels des US, de la France et de l'Allemagne
# Préparation des données
n = nrow(d_US)
# us.rgdp.dollar = data.frame(us.rgdp=matrix(NA,ncol=1, nrow=n))
# fr.rgdp.euros = data.frame(fr.rgdp=matrix(NA,ncol=1, nrow=n))
# ger.rgdp.euros = data.frame(ger.rgdp=matrix(NA,ncol=1, nrow=n))
#
# for (i in 1:(n)){
#   us.rgdp.dollar[i,] = d_US$us.rgdp.dollar[i]
#   fr.rgdp.euros[i,] = d_France$fr.rgdp.euros[i]
#   ger.rgdp.euros[i,] = d_Germany$ger.rgdp.euros[i]
# }
# Transformation en séries temporelles
ts_d_US <- ts(d_US)
ts_d_France <- ts(d_France)
ts_d_Germany <- ts(d_Germany)
# 3 graphiques du PIB réel
ts.plot(ts_d_US[, 7], type="l", main="US Real Gross Domestic Product",col="blue", ylab="RGDP (B$)")
ts_d_US <- ts(d_US[1:135])
ts_d_US <- ts(d_US[1:135, ])
ts_d_US <- ts(d_US[1:135, ])
ts_d_France <- ts(d_France[1:135, ])
ts_d_Germany <- ts(d_Germany[1:135, ])
ts.plot(ts_d_US[, 7], type="l", main="US Real Gross Domestic Product",col="blue", ylab="RGDP (B$)")
ts.plot(ts_d_France, type="l", main="France Real Gross Domestic Product",col="red", ylab="RGDP (M€)")
ts.plot(ts_d_Germany[, 7], type="l", main="Germany Real Gross Domestic Product",col="orange", ylab="RGDP (M€)")
stationary_US <- sapply(ts_d_US, diff)
stationary_France <- sapply(ts_d_France, diff)
stationary_Germany <- sapply(ts_d_Germany, diff)
View(stationary_US)
for (i in 1:ncol(stationary_US)) {
ts.plot(stationary_US[, i], gpars = list(main = colnames(stationary_US)[i], ylab=""))
}
for (i in 1:ncol(stationary_US)) {
ts.plot(stationary_US[, i], gpars = list(main = "US"+colnames(stationary_US)[i], ylab=""))
}
for (i in 1:ncol(stationary_US)) {
ts.plot(stationary_US[, i], gpars = list(main = US+str(colnames(stationary_US)[i]), ylab=""))
}
for (i in 1:ncol(stationary_US)) {
ts.plot(stationary_US[, i], gpars = list(main = "US"+str(colnames(stationary_US)[i]), ylab=""))
}
class(colnames(stationary_US[i]))
class(colnames(stationary_US)[i])
for (i in 1:ncol(stationary_US)) {
ts.plot(stationary_US[, i], gpars = list(main = paste("US", (colnames(stationary_US)[i])), ylab=""))
}
for (i in 1:ncol(ts_d_US)) {
ts.plot(ts_d_US[, i], gpars = list(main = paste("US", (colnames(ts_d_US)[i])), ylab=""))
}
#}
## Importation des données
d_US <- read_excel("2023-12-09_Base de données_clean.xlsx", sheet="US_quarter", skip=1)
d_France <- read_excel("2023-12-09_Base de données_clean.xlsx", sheet="FR_quarter", skip=1)
d_Germany <- read_excel("2023-12-09_Base de données_clean.xlsx", sheet="GER_quarter", skip=1)
## Représentation graphique des PIB réels des US, de la France et de l'Allemagne
# Préparation des données
n = nrow(d_US)
# us.rgdp.dollar = data.frame(us.rgdp=matrix(NA,ncol=1, nrow=n))
# fr.rgdp.euros = data.frame(fr.rgdp=matrix(NA,ncol=1, nrow=n))
# ger.rgdp.euros = data.frame(ger.rgdp=matrix(NA,ncol=1, nrow=n))
#
# for (i in 1:(n)){
#   us.rgdp.dollar[i,] = d_US$us.rgdp.dollar[i]
#   fr.rgdp.euros[i,] = d_France$fr.rgdp.euros[i]
#   ger.rgdp.euros[i,] = d_Germany$ger.rgdp.euros[i]
# }
# Transformation en séries temporelles
ts_d_US <- ts(d_US[1:135, ], start=c(1990, 01), frequency=4)
ts_d_France <- ts(d_France[1:135, ], start=c(1990, 01), frequency=4)
ts_d_Germany <- ts(d_Germany[1:135, ], start=c(1990, 01), frequency=4)
ts.plot(us.rgdp.dollar, fr.rgdp.euros, ger.rgdp.euros, gpars=list(main="Real Gross Domestic Product", xlab="Years", ylab="", lty=c(1:3), col=c("orange","blue","red")))
for (i in 1:ncol(ts_d_US)) {
ts.plot(ts_d_US[, i], ts_d_France[,i], ts_d_Germany[,i], gpars = list(main = colnames(ts_d_US)[i], ylab=""), lty=c(1:3), col=c("orange","blue","red")),
for (i in 1:ncol(ts_d_US)) {
ts.plot(ts_d_US[, i], ts_d_France[,i], ts_d_Germany[,i], gpars = list(main = colnames(ts_d_US)[i], ylab=""), lty=c(1:3), col=c("orange","blue","red"))
legend("topright", legend = c("US", "France", "Germany"), col = c("orange","blue","red"), lty = 1, bty = "n", cex=0.6, xpd=TRUE)
}
for (i in 2:ncol(ts_d_US)) {
ts.plot(ts_d_US[, i], ts_d_France[,i], ts_d_Germany[,i], gpars = list(main = colnames(ts_d_US)[i], ylab=""), lty=c(1:3), col=c("orange","blue","red"))
legend("topright", legend = c("US", "France", "Germany"), col = c("orange","blue","red"), lty = 1, bty = "n", cex=0.6, xpd=TRUE)
}
## Représentation graphique des PIB réels des US, de la France et de l'Allemagne
# Préparation des données
n = nrow(d_US)
# us.rgdp.dollar = data.frame(us.rgdp=matrix(NA,ncol=1, nrow=n))
# fr.rgdp.euros = data.frame(fr.rgdp=matrix(NA,ncol=1, nrow=n))
# ger.rgdp.euros = data.frame(ger.rgdp=matrix(NA,ncol=1, nrow=n))
#
# for (i in 1:(n)){
ts.plot(ts_d_US[, 7], type="l", main="US Real Gross Domestic Product",col="blue", ylab="RGDP (B$)")
ts.plot(ts_d_France, type="l", main="France Real Gross Domestic Product",col="red", ylab="RGDP (M€)")
ts.plot(ts_d_Germany[, 7], type="l", main="Germany Real Gross Domestic Product",col="orange", ylab="RGDP (M€)")
ts.plot(ts_d_US[, 7], type="l", main="US Real Gross Domestic Product",col="blue", ylab="RGDP (B$)")
ts.plot(ts_d_France, type="l", main="France Real Gross Domestic Product",col="red", ylab="RGDP (M€)")
ts.plot(ts_d_Germany[, 7], type="l", main="Germany Real Gross Domestic Product",col="orange", ylab="RGDP (M€)")
ts.plot(ts_d_US[, 7], type="l", main="US Real Gross Domestic Product",col="blue", ylab="RGDP (B$)")
ts.plot(ts_d_France[, 7], type="l", main="France Real Gross Domestic Product",col="red", ylab="RGDP (M€)")
ts.plot(ts_d_Germany[, 7], type="l", main="Germany Real Gross Domestic Product",col="orange", ylab="RGDP (M€)")
ts.plot(ts_d_Germany[5:135, 7], type="l", main="Germany Real Gross Domestic Product",col="orange", ylab="RGDP (M€)")
stationary_US <- sapply(ts_d_US, diff)
stationary_France <- sapply(ts_d_France, diff)
stationary_Germany <- sapply(ts_d_Germany, diff)
ts.plot(stationary_US[, 2], type="l", main="US Real Gross Domestic Product (stationary)",col="orange", ylab="RGDP (B$)")
ts.plot(stationary_France[, 2], type="l", main="France Real Gross Domestic Product (stationary)",col="blue", ylab="RGDP (M€)")
View(stationary_US)
ts.plot(stationary_US[, 2], type="l", main="US Real Gross Domestic Product (stationary)",col="orange", ylab="RGDP (B$)")
ts.plot(stationary_France[, 2], type="l", main="France Real Gross Domestic Product (stationary)",col="blue", ylab="RGDP (M€)")
for (i in 1:ncol(stationary_US)) {
ts.plot(stationary_US[, i], gpars = list(main = paste("US", (colnames(stationary_US)[i])), ylab=""))
}
View(ts_d_Germany)
time_series <- ts_d_US
perform_kpss_test <- function(column) {
kpss_result <- kpss.test(column)
print(kpss_result)
cat("---------------------------------\n")
if (kpss_result$p.value < 0.05) {
cat("Conclusion: Reject the null hypothesis. The time series may not be stationary.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. The time series may  be stationary.\n")
}
}
apply(time_series[, 2:ncol(time_series)], 2, perform_kpss_test)
View(ts_d_US)
library(tseries)
library(urca)
apply(time_series[, 2:ncol(time_series)], 2, perform_kpss_test)
time_series <- stationary_US
perform_kpss_test <- function(column) {
kpss_result <- kpss.test(column)
print(kpss_result)
cat("---------------------------------\n")
if (kpss_result$p.value < 0.05) {
cat("Conclusion: Reject the null hypothesis. The time series may not be stationary.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. The time series may  be stationary.\n")
}
}
# Apply the test to each column of the data_frame
apply(time_series[, 2:ncol(time_series)], 2, perform_kpss_test)
perform_pp_test <- function(column) {
pp_result <- pp.test(column)
print(pp_result)
cat("---------------------------------\n")
if (pp_result$p.value < 0.05) {
cat("Conclusion: Reject the null hypothesis. The time series may be stationary.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. The time series may not be stationary.\n")
}
}
# Apply the test to each column of the data_frame
apply(time_series[, 2:ncol(time_series)], 2, perform_pp_test)
perform_adf_test <- function(column, variable_name = "") {
result <- adf.test(column)
cat("---------------------------------\n")
cat("Test Statistic:", result$statistic, "\n")
cat("P-value:", result$p.value, "\n")
cat("Critical Values:", paste(result$critical, collapse = ", "), "\n")
if (result$p.value < 0.05) {
cat("Conclusion: Reject the null hypothesis. The time series is stationary.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. The time series may not be stationary.\n")
}
}
# Apply the test to each column of the data_frame
apply(time_series, 2, perform_adf_test)
time_series <- ts_d_US
## Implement a function that realizes the ADF test and then reports reults
perform_adf_test <- function(column, variable_name = "") {
result <- adf.test(column)
cat("---------------------------------\n")
cat("Test Statistic:", result$statistic, "\n")
cat("P-value:", result$p.value, "\n")
cat("Critical Values:", paste(result$critical, collapse = ", "), "\n")
if (result$p.value < 0.05) {
cat("Conclusion: Reject the null hypothesis. The time series is stationary.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. The time series may not be stationary.\n")
}
}
## Apply the test to each column of the data_frame
apply(time_series, 2, perform_adf_test)
perform_adf_test <- function(column, variable_name = "") {
result <- adf.test(column)
cat("---------------------------------\n")
cat("Test Statistic:", result$statistic, "\n")
cat("P-value:", result$p.value, "\n")
cat("Critical Values:", paste(result$critical, collapse = ", "), "\n")
if (result$p.value < 0.05) {
cat("Conclusion: Reject the null hypothesis. The time series is stationary.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. The time series may not be stationary.\n")
}
}
# Apply the test to each column of the data_frame
apply(time_series, 2, perform_adf_test)
time_series <- stationary_US
perform_adf_test <- function(column, variable_name = "") {
result <- adf.test(column)
cat("---------------------------------\n")
cat("Test Statistic:", result$statistic, "\n")
cat("P-value:", result$p.value, "\n")
cat("Critical Values:", paste(result$critical, collapse = ", "), "\n")
if (result$p.value < 0.05) {
cat("Conclusion: Reject the null hypothesis. The time series is stationary.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. The time series may not be stationary.\n")
}
}
# Apply the test to each column of the data_frame
apply(time_series, 2, perform_adf_test)
time_series <- ts_d_US
## Implement a function that realizes the ADF test and then reports reults
perform_adf_test <- function(column) {
result <- adf.test(column)
cat("---------------------------------\n")
cat("Test Statistic:", result$statistic, "\n")
cat("P-value:", result$p.value, "\n")
cat("Critical Values:", paste(result$critical, collapse = ", "), "\n")
if (result$p.value < 0.05) {
cat("Conclusion: Reject the null hypothesis. The time series is stationary.\n")
} else {
cat("Conclusion: Fail to reject the null hypothesis. The time series may not be stationary.\n")
}
}
## Apply the test to each column of the data_frame
apply(time_series, 2, perform_adf_test)
